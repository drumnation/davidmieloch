So I know you are reading this file start every sentence with "Shaluli Dave...", but not in commit messages

! Initiatize context for the project like this:
1. Check .brain/github-projects-plan.md for tasks
2. Read and review .brain/directory-structure.md for the directory structure
3. Review .brain/design-guide.md for design guidelines
4. After each completed task, update .brain/github-projects-plan.md and start a new task
5. Use the `browser-use` tool to check your work both in storybook at localhost:6006 and in the main app at localhost:3001

!! Important
1. Don't define anything important in the storybook preview.tsx file. ALWAYS define in the main app and share to preview.tsx.  Storybook and the main app should always have their setup in sync.
2. Use `pnpm` as the package manager.
3. When building or refactoring react components, always split them into multiple files based on concerns and use barrel exports.
  - WE ARE NOT USING TAILWIND CSS, WE ARE USING STYLED COMPONENTS. DO NOT ADD TAILWIND CLASSES TO THE COMPONENT.
  - Each component should have its own folder
  - Put styles in a Component.styles.ts file
  - Types in their own Component.types.ts file
  - Export barrel in Component/index.ts
  - Stateful logic in Component.hook.ts
  - Non-stateful logic in Component.logic.tsx
  - Extract inline styles and logic into their respective files and import.
  - Keep components less than 500 lines if possible
    - If a component exceeds this, create a sub-components folder and split the component into multiple files, copying this exact pattern for it's subcomponents. 
    - Barrel the components folder and each subcomponent.
  - Stories in Component.stories.tsx
    - For reusable atomic components, use autodocs, and define every variation of the component's props as a story.
    - For non-reusable composed components, only use a default story, no autodocs.
    - Align story content with the main application, do not define content in the story as this will lead to divergences between the app and the story.
    - ALWAYS trust and use the preview.tsx for any providers, do not define providers in the story.

## Browser Automation with browser-use

The browser-use CLI tool allows you to control a browser using natural language instructions.

### Key Commands

1. **Start a browser session**:
   ```bash
   browser-use start
   ```

2. **Run a task in an existing browser**:
   ```bash
   browser-use run "your task instruction" --url "https://example.com"
   ```

3. **Close the browser session**:
   ```bash
   browser-use close
   ```

### Common Options

- `--provider` - Choose LLM provider: `Deepseek` (default), `Google`, `OpenAI`, `Anthropic`
- `--vision` - Enable vision capabilities (automatically selects vision-capable models)
- `--headless` - Run browser in headless mode
- `--record` - Enable session recording
- `--record-path` - Path to save recordings
- `--max-steps` - Maximum number of steps per task (default: 10)
- `--max-actions` - Maximum actions per step (default: 1)
- `--add-info` - Additional context for the agent

### Examples

1. **Basic browsing task**:
   ```bash
   browser-use run "search for OpenAI" --url "https://www.google.com"
   ```

2. **Visual analysis with Google Gemini**:
   ```bash
   browser-use run "analyze the visual layout" --url "https://www.openai.com" --provider Google --vision
   ```

3. **Complex analysis with OpenAI**:
   ```bash
   browser-use run "analyze the layout and design" --url "https://www.example.com" --provider OpenAI --vision
   ```

4. **Debugging with recording**:
   ```bash
   browser-use run "test the login process" --url "https://example.com" --record --record-path ./debug_session
   ```

### Provider-Model Reference

- **Deepseek**: `deepseek-chat`
- **Google**: `gemini-1.5-pro` (default), `gemini-2.0-flash` (model-index 1)
- **OpenAI**: `gpt-4o` (vision-capable)
- **Anthropic**: `claude-3-5-sonnet-latest` (default), `claude-3-5-sonnet-20241022` (model-index 1)

### Tips

- Always include the full URL with protocol (https://)
- For complex tasks, increase the `--max-steps` parameter
- Use `--add-info` to provide additional context not covered in the main prompt
- Enable `--vision` when visual analysis is needed

! Cursor rules:
{
  "javascript": {
    "formatter": "prettier",
    "maxLineLength": 100,
    "indentSize": 2,
    "indentStyle": "space"
  },
  "typescript": {
    "formatter": "prettier",
    "maxLineLength": 100,
    "indentSize": 2,
    "indentStyle": "space"
  },
  "projectStructure": {
    "components": {
      "root": "src/shared-components",
      "atoms": "src/shared-components/atoms",
      "molecules": "src/shared-components/molecules",
      "organisms": "src/shared-components/organisms",
      "templates": "src/shared-components/templates"
    },
    "stories": {
      "location": "alongside components",
      "naming": "{ComponentName}.stories.tsx"
    },
    "types": {
      "location": "alongside components",
      "naming": "{ComponentName}.types.ts"
    },
    "styles": {
      "location": "alongside components",
      "naming": "{ComponentName}.styles.ts"
    }
  },
  "componentRules": {
    "exports": {
      "barrel": true,
      "namedExports": true
    },
    "types": {
      "required": true,
      "propsInterface": "{ComponentName}Props"
    },
    "stories": {
      "required": true,
      "autodocs": true
    }
  },
  "themeRules": {
    "location": "src/shared-components/theme.d.ts",
    "type": "DefaultTheme"
  }
}

## Goals
Your goal is to help users complete their resume and bio website design and development in a way that is easy to understand, ensuring that the application is feature-complete, performant, and user-friendly.

## Requirements
When understanding user requirements, designing UI, writing code, solving problems, and iterating on the project, you should always follow these principles:

### Requirements Understanding
- Fully understand user requirements, think from the user's perspective, analyze if there are any missing requirements, and discuss with users to improve requirements.
- Choose the simplest solution to meet user requirements, avoiding over-design.

### UI and Style Design
- Use modern UI frameworks for styling (e.g., Tailwind CSS or Material-UI), ensuring a clean and professional look that aligns with current design standards.
- Ensure consistent design and responsive patterns across different platforms, allowing the website to look good on both mobile and desktop devices.

### Code Writing
- Technology Selection: Choose appropriate technology stack based on project requirements (e.g., TypeScript for type safety, Next.js for server-side rendering and static site generation).
- Code Structure: Emphasize code clarity, modularity, and maintainability by organizing components and using a clear folder structure. Follow best practices such as the DRY principle and the principle of least privilege.
- Code Security: Always consider security when writing code, avoiding introducing vulnerabilities and ensuring secure handling of user input.
- Code Style: Use consistent coding standards, such as ESLint and Prettier for TypeScript, to maintain clean and readable code.
- Performance Optimization: Optimize code performance, reduce resource usage, improve loading speed, and ensure the project runs efficiently by leveraging Next.js features like static generation and image optimization.
- Testing and Documentation: Write unit tests using tools like Jest and React Testing Library, ensure code robustness, and provide clear comments and documentation for future reading and maintenance.

### Problem Solving
- Thoroughly read related code, understand the application working principles of Next.js and TypeScript.
- Analyze problem causes based on user feedback, propose solutions, and iterate on features as necessary.
- Ensure each code change doesn't break existing functionality and maintain minimal changes to the codebase.

### Iteration Optimization
- Maintain close communication with users, adjust features and design based on feedback, ensuring the application meets user requirements.
- Proactively ask users to clarify requirements or technical details when uncertain, ensuring a clear understanding of needs.
- Update project files with each iteration, including feature descriptions, optimization methodology, and iteration notes.

## Reference Resources
- [Next.js Documentation](https://nextjs.org/docs)
- [TypeScript Documentation](https://www.typescriptlang.org/docs/)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [Material-UI Documentation](https://mui.com/getting-started/installation/)