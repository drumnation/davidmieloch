import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ClientProviders } from '@/providers/ClientProviders';
import StyledComponentsRegistry from './registry'
import { lexend, inter, manrope, workSans, ibmPlex } from '@/styles/fonts';
import { serverLogger } from '@/utils/serverLogger';

// Log when the app layout is rendered
serverLogger.info('Root layout rendering');

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  try {
    serverLogger.info('Setting up providers in root layout');
    
    return (
      <html lang="en" className={`${lexend.variable} ${inter.variable} ${manrope.variable} ${workSans.variable} ${ibmPlex.variable} ${geistSans.variable} ${geistMono.variable}`}>
        <body>
          <StyledComponentsRegistry>
            <ClientProviders>
              {children}
            </ClientProviders>
          </StyledComponentsRegistry>
        </body>
      </html>
    );
  } catch (error) {
    serverLogger.error('Critical error in root layout:', error);
    
    // Fallback minimal layout in case of provider errors
    return (
      <html lang="en">
        <body>
          <div style={{ padding: '2rem' }}>
            <h1>Critical Error</h1>
            <p>The application encountered a critical error during initialization.</p>
            <p>Please check the console logs for more details.</p>
          </div>
        </body>
      </html>
    );
  }
}
